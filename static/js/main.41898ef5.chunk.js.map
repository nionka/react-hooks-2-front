{"version":3,"sources":["hooks/useJsonFetch.js","components/Data/Data.jsx","components/Error/Error.jsx","components/Loading/Loading.jsx","App.js","reportWebVitals.js","index.js"],"names":["useJsonFetch","url","opts","useState","data","setData","error","setError","loading","setLoading","useEffect","a","fetch","response","ok","Error","statusText","json","message","fetchData","Data","process","status","Loading","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAEe,SAASA,EAAaC,EAAKC,GAAO,IAAD,EACpBC,mBAAS,IADW,mBACrCC,EADqC,KAC/BC,EAD+B,OAElBF,mBAAS,MAFS,mBAErCG,EAFqC,KAE9BC,EAF8B,OAGdJ,oBAAS,GAHK,mBAGrCK,EAHqC,KAG5BC,EAH4B,KA8B5C,OAzBAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,6DACdF,GAAW,GADG,kBAIaG,MAAMX,EAAKC,GAJxB,WAIJW,EAJI,QAMIC,GANJ,sBAOA,IAAIC,MAAMF,EAASG,YAPnB,uBAUSH,EAASI,OAVlB,OAUJA,EAVI,OAWVZ,EAAQY,GACRV,EAAS,MAZC,kDAeVA,EAAS,KAAIW,SAfH,yBAiBVT,GAAW,GAjBD,6EAAH,qDAqBfU,KACD,CAAClB,EAAKC,IAEF,CAACE,EAAMI,EAASF,G,WCjBZc,MAZf,WAAiB,IAAD,EAEmBpB,EAAa,GAAD,OAAIqB,gCAAJ,UAF/B,mBAELjB,EAFK,KAIZ,OAJY,UAKR,qCACA,gJACA,4BAAIA,EAAKkB,aCKFP,MAZf,WAAkB,IAAD,EAEkBf,EAAa,GAAD,OAAIqB,gCAAJ,WAF9B,mBAESf,GAFT,gBAIb,OACI,qCACA,gJACCA,GAAS,4BAAIA,QCKPiB,MAZf,WAAoB,IAAD,EAEgBvB,EAAa,GAAD,OAAIqB,gCAAJ,aAF5B,mBAEFb,GAFE,WAIf,OAJe,KAKX,qCACA,4JACCA,GAAW,+CCMLgB,MAXf,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41898ef5.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nexport default function useJsonFetch(url, opts) {\n    const [data, setData] = useState([]);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true)\n            \n            try {\n                const response = await fetch(url, opts);\n\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n\n                const json = await response.json();\n                setData(json)\n                setError(null)\n\n            } catch (err) {\n                setError(err.message)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchData()\n    }, [url, opts]);\n\n    return [data, loading, error]\n}","/* eslint-disable no-unused-vars */\nimport useJsonFetch from '../../hooks/useJsonFetch';\n\nfunction Data() {\n\n    const [data, loading, error] = useJsonFetch(`${process.env.REACT_APP_URL}/data`);\n    \n    return (\n        <>\n        <h2>Это компонент данных</h2>\n        <p>{data.status}</p>\n        </>\n    )\n}\n\nexport default Data","/* eslint-disable no-unused-vars */\nimport useJsonFetch from '../../hooks/useJsonFetch';\n\nfunction Error() {\n\n    const [data, loading, error] = useJsonFetch(`${process.env.REACT_APP_URL}/error`);\n    \n    return (\n        <>\n        <h2>Это компонент ошибки</h2>\n        {error && <p>{error}</p>}\n        </>\n    )\n}\n\nexport default Error","/* eslint-disable no-unused-vars */\nimport useJsonFetch from '../../hooks/useJsonFetch';\n\nfunction Loading() {\n\n    const [data, loading, error] = useJsonFetch(`${process.env.REACT_APP_URL}/loading`);\n\n    return (\n        <>\n        <h2>Это компонент загрузки</h2>\n        {loading && <p>Loading...</p>}\n        </>\n    )\n}\n\nexport default Loading","import './App.css';\nimport Data from './components/Data/Data';\nimport Error from './components/Error/Error';\nimport Loading from './components/Loading/Loading';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Data />\n      <Error />\n      <Loading />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}